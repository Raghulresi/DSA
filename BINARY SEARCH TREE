import java.util.*;
class Node
{
    int data;
    Node left;
    Node right;
    Node(int v)
    {
        this.data = v;
        left = null;
        right = null;
    }
}
class BinaryTree
{
    public static void Insert(Node root,Node node)
    {
        if(root==null || node==null) return;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty())
        {
            Node temp = q.poll();
            if(temp.left==null)
            {
                temp.left = node;
                break;
            }
            else
            {
                q.add(temp.left);
            }
            if(temp.right==null)
            {
                temp.right = node;
                break;
            }
            else
            {
                q.add(temp.right);
            }
        }
    }
    
    public static void PrintInorder(Node root)
    {
        if(root == null) return;
        PrintInorder(root.left);
        System.out.print(root.data+" ");
        PrintInorder(root.right);
    }
    
    public static void PrintPreorder(Node root)
    {
        if(root == null) return;
        System.out.print(root.data+" ");
        PrintPreorder(root.left);
        PrintPreorder(root.right);
    }
    
    public static void PrintPostorder(Node root)
    {
        if(root == null) return;
        PrintPostorder(root.left);
        PrintPostorder(root.right);
        System.out.print(root.data+" ");
    }
    
    public static int height(Node root)
    {
        if(root == null) return 0;
        int left = height(root.left);
        int right = height(root.right);
        return (1+Math.max(left,right));
    }
    
    static int d =0;
    public static int diameterAndEdges(Node root) 
    {
       if (root == null) return 0;
       int lh = diameterAndEdges(root.left);
       int rh = diameterAndEdges(root.right);
       d = Math.max(d ,lh+rh+1);
       return 1+Math.max(lh, rh);
    }
    
    public static int countLeaf(Node root)
    {
        if(root == null) return 0;
        if(root.left == null && root.right == null) return 1;
        return countLeaf(root.left) + countLeaf(root.right);
    }
    
    public static int countNodes(Node root) 
    {
        if (root == null) return 0;
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
    
    public static int checkBalanceTree(Node root)
    {
        if(root == null) return 0;
        int left = checkBalanceTree(root.left);
        if(left==-1) return -1;
        int right = checkBalanceTree(root.right);
        if(right==-1) return -1;
        if(Math.abs(left-right)>1) return -1;
        return 1+Math.max(left,right);
    }
    
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int choice,val,n,rt;
        Node root = null;
        System.out.print("Enter the total node : ");
        n = sc.nextInt();
        System.out.print("Enter root node : ");
        rt = sc.nextInt();
        root = new Node(rt);
        System.out.print("Enter the child node : ");
        for(int i=1;i<n;i++)
        {
            int a = sc.nextInt();
            Node node = new Node(a);
            Insert(root,node);
        }
        do
        { 
            System.out.println();
            System.out.println("------------------------------");
            System.out.println("1.Insert Inorder traversal");
            System.out.println("2.Insert preorder traversal");
            System.out.println("3.Insert postorder traversal");
            System.out.println("4.Height of the tree");
            System.out.println("5.Diameter of the tree");
            System.out.println("6.Count number of leaf");
            System.out.println("7.Count total number of nodes");
            System.out.println("8.Check for a balanced tree");
            System.out.println("15.Exit");
            System.out.print("Enter the choice : ");
            choice = sc.nextInt();
            switch(choice)
            {
                case 1:
                    PrintInorder(root);
                    break;
                    
                case 2:
                    PrintPreorder(root);
                    break;
                    
                case 3:
                    PrintPostorder(root);
                    break;
                
                case 4:
                    System.out.println(height(root));
                    break;
                
                case 5:
                    diameterAndEdges(root);
                    System.out.println("Diameter: "+d); //longest path all direction
                    System.out.println("Edges: "+(d-1));
                    break;
                    
                case 6:
                    System.out.println(countLeaf(root));//which node have no child
                    break;
                
                case 7:
                    System.out.println(countNodes(root));
                    break;
                    
                case 8:
                    int bal = checkBalanceTree(root);//balanceTree = heightofleftnode - heightofrightnode (should be 1 or 0)
                    if(bal!=-1)
                    {
                        System.out.println("The tree is balanced!");
                    }
                    else
                    {
                        System.out.println("The tree is not-balanced!");
                    }
                    break;
                    
                case 15:
                    System.out.println("Program Exited!!");
                    break;
                
                default:
                    System.out.println("Enter the valid choice!!");
                    break;
            }
        }while(choice!=15);
    }
}


