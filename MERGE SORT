/*  Merge Sort ---->  O(nlogn)

         Steps ---->  1. Divide: Recursively divide the array into two halves until each part has only one element
                      2. Recursively Process Each Half: Continue dividing each half.
                      3. Merge the Subarrays: Start merging the smallest arrays back into larger sorted arrays
                      4. Merge Larger Sorted Arrays.
                      5. continue the process.                                                                            */
                     
import java.util.*;
public class Main
{
    public static void Merge(int[] arr, int left, int right)
    {
        if(left < right)
        {
            int mid = (left + right)/2;
        
            // Recursively divide the array
            Merge(arr, left, mid);
            Merge(arr, mid+1, right);
        
            // Merge and sort the divided arrays
            MergeSort(arr, left, mid, right);
        }
    }
    
    public static void MergeSort(int[] arr,int left,int mid,int right)
    {
        int n1 = mid + 1 -left;
        int n2 = right - mid;
        
         // Create temporary arrays  
        int[] leftarr = new int[n1];
        int[] rightarr = new int[n2];
        
        // Coping the divide value in left
        for(int i=0; i<n1; i++)
        {
            leftarr[i] = arr[left+i];
        }
        
        // Coping the divide value in right
        for(int i=0; i<n2; i++)
        {
            rightarr[i] = arr[mid+1+i];
        }
        
        
        int i=0, j=0;
        int k = left;
        
        // Merging and sorting when both array have values

        while(i<n1 && j<n2)
        {
            if(leftarr[i] <= rightarr[j])
            {
               arr[k] = leftarr[i];
               i++;
            }
            else
            {
               arr[k] = rightarr[j];
               j++;
            }
            
            k++;
        }
        
        // Copy any remaining elements of leftArray
        while(i < n1)
        {
            arr[k] = leftarr[i];
            i++;
            k++;
        }
        
        // Copy any remaining elements of rightArray
        while(j<n2)
        {
            arr[k] = rightarr[j];
            j++;
            k++;
        }
        

    }
    
	public static void main(String[] args) 
	{
	    Scanner sc = new Scanner(System.in);
	    
	    int n = sc.nextInt();
	    int[] arr = new int[n];
	    
	    for(int i=0; i<n; i++)
	    {
	        arr[i]=sc.nextInt();
	    }
	    
	    System.out.println("Array before Merge sorting : ");
	    for(int i=0; i<n; i++)
	    {
	        System.out.print(arr[i]+" ");
	    }
	    System.out.println(" ");
	    
	    int left = 0;
	    int right= n-1;
	    
	    Merge(arr,left,right);
	    
	    System.out.println("Array after Merge sorting :");
	    for(int i=0; i<n; i++)
	    {
	        System.out.print(arr[i]+" ");
	    }
	    System.out.println(" ");
	   	
	}
}
