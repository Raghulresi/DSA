/*  Insertion Sort ---->  O(n)
  
             Steps ---->  1. Start from the second element (index 1) as the first element is considered sorted.
                          2. Pick the current element (key) and compare it with elements in the sorted portion (elements before the current index).
                          3. If any element in the sorted portion is larger than the key, shift that element one position to the right.
                          4. Place the key in its correct position within the sorted portion.
                          5. Continue this process for all elements until the array is sorted.    */

import java.util.*;
public class Main
{
    public static int[] InsertionSort(int[] arr,int n)
    {
        int temp;
        int j;
        for(int i=1; i<n; i++)
        {
            temp = arr[i];
            j = i-1;
            while(j >= 0 && temp <= arr[j])
            {
                arr[j+1] = arr[j];
                j = j-1;
            }
            arr[j+1] = temp;
        }
        
        return arr;
    }
    
	public static void main(String[] args) 
	{
	    Scanner sc = new Scanner(System.in);
	    
	    int n = sc.nextInt();
	    int[] arr = new int[n];
	    
	    for(int i=0; i<n; i++)
	    {
	        arr[i]=sc.nextInt();
	    }
	    
	    System.out.println("Array before insertion sorting : ");
	    for(int i=0; i<n; i++)
	    {
	        System.out.print(arr[i]+" ");
	    }
	    System.out.println(" ");
	    
	    InsertionSort(arr,n);
	    
	    System.out.println("Array after insertion sorting :");
	    for(int i=0; i<n; i++)
	    {
	        System.out.print(arr[i]+" ");
	    }
	    System.out.println(" ");
	   	
	}
}
