/* Binary Search ---->  O(log n)
                        Array must be sorted 
                        Faster than linearSearch 

          Steps  ---->  1. Start with a sorted array and a number you want to find (the "target").
                        2. Find middle value to divide an array.
                        3. check: 
                              fisrt<=last             
                                  middle == target --> return middle index
                                  middle < target --> first=middle+1
                                  middle > target --> last=middle-1
                              first>last 
                                  not found
                        4. Keep repeating the process until you either find the number or run out of array to check.       */

import java.util.*;
public class Main
{
    public static int binarysearch(int[] arr,int first,int last,int search)
    {
        int mid = (first + last) / 2;
        
        while(first <= last)
        {
            
            if(arr[mid] == search)
            {
                return mid;
            }
            else if(arr[mid] < search)
            {
                first = mid + 1;
            }
            else if(arr[mid] > search)
            {
                last = mid - 1;
            }
            
            mid = (first + last) / 2;
        }
        
        if(first > last)
        {
            return -1;
        }
        
        return 0;
        
    }
    
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		
		int n = sc.nextInt();
		int[] arr = new int[n];
		
		for(int i=0; i<n; i++)
		{
		    arr[i]=sc.nextInt();
		}
		
		int search = sc.nextInt();
		
		int first = 0;
		int last  = n-1;
		
		int result = binarysearch(arr,first,last,search);
		
		if(result == -1)
		{
		    System.out.println("Element not found");
		}
		else
		{
		    System.out.println("Element found at "+result);
		}
		
	}
}
